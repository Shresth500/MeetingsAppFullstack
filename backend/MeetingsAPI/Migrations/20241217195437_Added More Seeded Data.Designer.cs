// <auto-generated />
using System;
using MeetingsAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MeetingsAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241217195437_Added More Seeded Data")]
    partial class AddedMoreSeededData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.2");

            modelBuilder.Entity("MeetingsAPI.Models.Domain.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "123456789012345678901234",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e22aff06-cbed-4fd4-b766-511735614f7f",
                            Email = "shahrukh@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SHAHRUKH@EXAMPLE.COM",
                            NormalizedUserName = "SHAHRUKH KHAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEGB3nIjVfJ6CUaNRma+9dSw8zQbFu6niOG3XG5kpjKVOJfUFkV/Sg/BO7q4wHFPnzQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "efeff1b7-5465-4b88-9aff-a4e63612554e",
                            TwoFactorEnabled = false,
                            UserName = "Shahrukh Khan"
                        },
                        new
                        {
                            Id = "123456789012345678901235",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "022ddd28-6512-4ad2-b6b9-e6ff46e5ce0c",
                            Email = "kajol@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "KAJOL@EXAMPLE.COM",
                            NormalizedUserName = "KAJOL",
                            PasswordHash = "AQAAAAIAAYagAAAAEBd0F+cJuFUFz+Oj1lRZLb+JWPvTSHgTEBgo/Pv4EHB9kjk56JhkRUV4eXkSzDmiSw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "601c1d8d-9678-496f-8e6b-a96019cd2e65",
                            TwoFactorEnabled = false,
                            UserName = "Kajol"
                        },
                        new
                        {
                            Id = "123456789012345678901236",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "308bacee-5324-497e-94bb-13d0a70a119f",
                            Email = "deepika@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DEEPIKA@EXAMPLE.COM",
                            NormalizedUserName = "DEEPIKA PADUKONE",
                            PasswordHash = "AQAAAAIAAYagAAAAENo+B1eSRQ8l9cIHjh4MZBjdGWP+0JmsVD2VN9dej2d7CGppr+zbyGYrUDowC1Xt4g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "925d4937-cc7c-4b25-a060-d54502d1c2e1",
                            TwoFactorEnabled = false,
                            UserName = "Deepika Padukone"
                        },
                        new
                        {
                            Id = "123456789012345678901237",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "010a49a5-5bf0-4591-8b59-a14a940d5e42",
                            Email = "ranbir@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "RANBIR@EXAMPLE.COM",
                            NormalizedUserName = "RANBIR KAPOOR",
                            PasswordHash = "AQAAAAIAAYagAAAAECfTaT8JAkq6zXayQMq0SAXXAFeeR4kbC4X5F9BrsEsuL951GbETMMeJ+9Dr7vO8pg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b871c22a-c7bb-4500-b6e2-62884dab5b65",
                            TwoFactorEnabled = false,
                            UserName = "Ranbir Kapoor"
                        },
                        new
                        {
                            Id = "123456789012345678901238",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "aac293f6-84a8-489c-a6e4-bb650c131325",
                            Email = "ranveer@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "RANVEER@EXAMPLE.COM",
                            NormalizedUserName = "RANVEER SINGH",
                            PasswordHash = "AQAAAAIAAYagAAAAELwzE6H4PIG95f3mAEauRSA1fvuwrIWpDIBaA80MOeLUf2cSfvOWBzgwoAbCEOGiZg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0c32c0c3-66bc-4b4d-ba4f-31535ed79c7e",
                            TwoFactorEnabled = false,
                            UserName = "Ranveer Singh"
                        },
                        new
                        {
                            Id = "123456789012345678901239",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e937ba1f-56cf-48bf-b736-23f79760dbe8",
                            Email = "amitabh@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "AMITABH@EXAMPLE.COM",
                            NormalizedUserName = "AMITABH BACHCHAN",
                            PasswordHash = "AQAAAAIAAYagAAAAENGST2SE55VaYxNi9f8KpNPSUJRLvdbsbT96PqUv/bD+GEvH+TfvS/EJaGKBnJjctg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "485e010b-011f-46ba-8f82-5f65136ea2f2",
                            TwoFactorEnabled = false,
                            UserName = "Amitabh Bachchan"
                        },
                        new
                        {
                            Id = "123456789012345678901240",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e1e3df34-b0ed-4f16-bc8b-73806e42e0bc",
                            Email = "john@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JOHN@EXAMPLE.COM",
                            NormalizedUserName = "JOHN ABRAHAM",
                            PasswordHash = "AQAAAAIAAYagAAAAELnK1SVp23dwWdX/AGokSvPbeB5Z69VXgSJUmeen+Ox/eNMWwiCV7LATTF9i7wRJEg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0bc03afa-5ab8-479b-a6e1-62d868668f89",
                            TwoFactorEnabled = false,
                            UserName = "John Abraham"
                        },
                        new
                        {
                            Id = "123456789012345678901241",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bad04d02-776d-403f-b2c0-013def30331f",
                            Email = "kohli@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "KOHLI@EXAMPLE.COM",
                            NormalizedUserName = "VIRAT KOHLI",
                            PasswordHash = "AQAAAAIAAYagAAAAEHZBAKUv7TPXdbr+rSasnS8nDDaBu8ZiAzJWlircLfso98pamCvCX4gBwWwrhISJwQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0221672e-21b5-4afb-b911-4ad0c3fa6b36",
                            TwoFactorEnabled = false,
                            UserName = "Virat Kohli"
                        },
                        new
                        {
                            Id = "123456789012345678901242",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b04ee696-0b3e-4832-8f52-9209777ec52b",
                            Email = "dhoni@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DHONI@EXAMPLE.COM",
                            NormalizedUserName = "MAHENDRA SINGH DHONI",
                            PasswordHash = "AQAAAAIAAYagAAAAEPhVCsoOBLDXwzU30+E5iGiqRJbBU7DMCnHx/Asv+FH8MminsBjiWSQFHp592c7AZA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3c4f926d-8501-4c81-9afe-1517590042c3",
                            TwoFactorEnabled = false,
                            UserName = "Mahendra Singh Dhoni"
                        },
                        new
                        {
                            Id = "123456789012345678901243",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f17aa448-7910-4c47-b550-6fce34b359d6",
                            Email = "dravid@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DRAVID@EXAMPLE.COM",
                            NormalizedUserName = "RAHUL DRAVID",
                            PasswordHash = "AQAAAAIAAYagAAAAECZAec9cv7I1pGMP6fxsQb0EsBYeCU5NCIqtGgxVG1ySyizhedXIeVkTtfjqFgln2Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b9e27648-2f7c-4816-a710-40ed01c2fd7f",
                            TwoFactorEnabled = false,
                            UserName = "Rahul Dravid"
                        },
                        new
                        {
                            Id = "123456789012345678901244",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ee223eeb-6688-4788-91fb-7f55bd3af999",
                            Email = "sachin@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SACHIN@EXAMPLE.COM",
                            NormalizedUserName = "SACHIN TENDULKAR",
                            PasswordHash = "AQAAAAIAAYagAAAAEFOzAaN+EQrzxrMrMoTSmCBG6eWv2G3aBlvpsio+Qqp3OPdO4W1dvUzikZ5Q99Oe4A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fed6e57e-bfd5-4095-a812-270a22998a5b",
                            TwoFactorEnabled = false,
                            UserName = "Sachin Tendulkar"
                        },
                        new
                        {
                            Id = "123456789012345678901245",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a9cb04d0-feda-4bf1-8997-4d03d2734036",
                            Email = "sehwag@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SEHWAG@EXAMPLE.COM",
                            NormalizedUserName = "VIRENDER SEHWAG",
                            PasswordHash = "AQAAAAIAAYagAAAAEFtvVi3hL7baTFf8hjKiHKTUuOOhTPjev34OUt7KKu9BpBhLI6MGAgTzy92mrGJ4fw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "af51ea32-4fff-4185-8570-e6f9217bdbf6",
                            TwoFactorEnabled = false,
                            UserName = "Virender Sehwag"
                        },
                        new
                        {
                            Id = "123456789012345678901246",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "05176ec9-ca54-4ea1-accc-2a9bbca52bf1",
                            Email = "bumrah@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BUMRAH@EXAMPLE.COM",
                            NormalizedUserName = "JASPRIT BUMRAH",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ0BqX4hPmjcaE4fyiQp/PSEQUIXNvBl1B1S4yq/qpUlXReYNpewmj+250XFWcSRQA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9b7baf06-1266-4151-9285-8aa3b1d201a1",
                            TwoFactorEnabled = false,
                            UserName = "Jasprit Bumrah"
                        },
                        new
                        {
                            Id = "123456789012345678901247",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8ec76648-2ad5-404f-b5ca-d79d82d64d16",
                            Email = "ashwin@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ASHWIN@EXAMPLE.COM",
                            NormalizedUserName = "RAVI ASHWIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEBynEhOlhhD4raGX8tQ0Hvex8Raf7nAGjzSen4zUEi0b6I44yWmXgGsVPzbjipMbdw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "32476916-ac42-4e06-94a8-b5c1f09c86b0",
                            TwoFactorEnabled = false,
                            UserName = "Ravi Ashwin"
                        },
                        new
                        {
                            Id = "123456789012345678901248",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c2b1c355-788e-406e-99b5-2a5899aee387",
                            Email = "irfan@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "IRFAN@EXAMPLE.COM",
                            NormalizedUserName = "IRFAN PATHAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEFEGjvpHATjl8xltMpYci8NnfEJL1NMag30uWGRs9F4A4YHnuV1zDeTHWj95y4dIMQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "00d31375-a325-459f-bc97-5c4975efecef",
                            TwoFactorEnabled = false,
                            UserName = "Irfan Pathan"
                        },
                        new
                        {
                            Id = "123456789012345678901249",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1f5bcdaa-f403-48cb-9b31-dea17d9dd89d",
                            Email = "aravind@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ARAVIND@EXAMPLE.COM",
                            NormalizedUserName = "ARAVIND VARIER",
                            PasswordHash = "AQAAAAIAAYagAAAAEOFNUA6dKDFqAW7gepeGTL4i/wcEkgKKH6RXMkIDDLE7ejTDMKlDwPjtv/iTx0J2Vg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6efb8313-a076-4928-8877-5ec004b1f96c",
                            TwoFactorEnabled = false,
                            UserName = "Aravind Varier"
                        },
                        new
                        {
                            Id = "123456789012345678901250",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2fd3a3f3-fbdc-42ed-8279-29ad57965923",
                            Email = "asmita@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ASMITA@EXAMPLE.COM",
                            NormalizedUserName = "ASMITA CHAVAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEOesz/WrvieOEE/jSHL7iaqDtFceQDemjA6A1d/L+qCP8bU4y50fJKjJCVN0oaamHg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "10b37b2c-593c-474c-8715-1ed7fbb19db4",
                            TwoFactorEnabled = false,
                            UserName = "Asmita Chavan"
                        },
                        new
                        {
                            Id = "123456789012345678901251",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6d66ab60-e548-444a-87be-9d25bd2bf008",
                            Email = "dhruv@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DHRUV@EXAMPLE.COM",
                            NormalizedUserName = "DHRUV KHANNA",
                            PasswordHash = "AQAAAAIAAYagAAAAEH8r0KMFl4G7JT9HiJG1jWlx/cSkcxhfg3Fh/KR4TrawQuwmC845Wvc5rcNExFB4oQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bbd3db19-d89d-46df-838b-bd9f2227933f",
                            TwoFactorEnabled = false,
                            UserName = "Dhruv Khanna"
                        },
                        new
                        {
                            Id = "123456789012345678901252",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2c773890-809f-4620-9548-1ff93d1adbac",
                            Email = "divya@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DIVYA@EXAMPLE.COM",
                            NormalizedUserName = "DIVYA NAGARE",
                            PasswordHash = "AQAAAAIAAYagAAAAELJf31+THTIEJA6kDk7ITmIJZgyoZDdTOfcc46WsEy3ziXX4ttP9KmsqyhUJKOGFfA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "af5e9ae3-d197-446e-a223-d70f7e988776",
                            TwoFactorEnabled = false,
                            UserName = "Divya Nagare"
                        },
                        new
                        {
                            Id = "123456789012345678901253",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2992e09f-959f-46fe-9f60-87ef5b4cc7f0",
                            Email = "gaurav@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "GAURAV@EXAMPLE.COM",
                            NormalizedUserName = "GAURAV DEORE",
                            PasswordHash = "AQAAAAIAAYagAAAAEEU8FAEVYK5921NlLyc4AICzDfkt4efXWt0Lxob5DWok6imqaLtQg9byX4WTTc4ugg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f2a108b0-8c2f-4c43-9ed0-b9423d4066d3",
                            TwoFactorEnabled = false,
                            UserName = "Gaurav Deore"
                        },
                        new
                        {
                            Id = "123456789012345678901254",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c642c6c7-3c76-47e5-92ce-5b1b1dedf65a",
                            Email = "piyush@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PIYUSH@EXAMPLE.COM",
                            NormalizedUserName = "PIYUSH EKLAVYA",
                            PasswordHash = "AQAAAAIAAYagAAAAEBkledld/m8yvhxlOGJanSuuW+CSs2mRQzKf4T4i/J8wf9qig4Su2JONKcbrRx/K7g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4a192126-cb0c-4b62-9369-63b872e45d71",
                            TwoFactorEnabled = false,
                            UserName = "Piyush Eklavya"
                        },
                        new
                        {
                            Id = "123456789012345678901255",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "72b1d3b8-1491-43eb-9566-34f6796323a1",
                            Email = "rahul@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "RAHUL@EXAMPLE.COM",
                            NormalizedUserName = "RAHUL ANAND",
                            PasswordHash = "AQAAAAIAAYagAAAAENXobUxgvdHjHUclZbvgQYIIK7LyafzIpgqPKGmKPdp0u057ZJn6uLFJH5Oj2osqlw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "06855321-fb8c-4fdf-889d-d0a68b00715b",
                            TwoFactorEnabled = false,
                            UserName = "Rahul Anand"
                        },
                        new
                        {
                            Id = "123456789012345678901256",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b65273d9-a00a-4699-b560-27a5201430af",
                            Email = "sahil@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SAHIL@EXAMPLE.COM",
                            NormalizedUserName = "SAHIL BHOLA",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ66uM4sgfVIoraQCYIDeFYm0VsiC22zvODcrAcx+vatO5shexx3XNVUcVzxodc6Ow==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8fe4b565-9d29-4257-bfd8-3ef6643ab5cf",
                            TwoFactorEnabled = false,
                            UserName = "Sahil Bhola"
                        },
                        new
                        {
                            Id = "123456789012345678901257",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "45a92d2b-61f6-4aa1-b6a6-9753241be30e",
                            Email = "vinay@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "VINAY@EXAMPLE.COM",
                            NormalizedUserName = "VINAY REDDY",
                            PasswordHash = "AQAAAAIAAYagAAAAEBOKKf7lBYE5oYVLvvyOdd6+rz0SomtI1pDbPN2MmVyLrmEImFSjE2of/T8bdQtGUg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "13807184-cd22-4dda-bb5a-d7d1668aaf12",
                            TwoFactorEnabled = false,
                            UserName = "Vinay Reddy"
                        },
                        new
                        {
                            Id = "123456789012345678901258",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d753c7da-6698-4af9-911d-0b1ed3846e2d",
                            Email = "ambani@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "AMBANI@EXAMPLE.COM",
                            NormalizedUserName = "MUKESH AMBANI",
                            PasswordHash = "AQAAAAIAAYagAAAAEIBVyQzWh/3ophMd5ARAun5+6MKLGrF3ur2n93kHhpDnMP++nkMh5l7xdAqgd5Ui2g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0a545527-2e8a-4361-902d-4fd658cf41df",
                            TwoFactorEnabled = false,
                            UserName = "Mukesh Ambani"
                        },
                        new
                        {
                            Id = "123456789012345678901259",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "895b8b0f-d2be-4273-9cf6-e0072391cb08",
                            Email = "tata@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TATA@EXAMPLE.COM",
                            NormalizedUserName = "RATAN TATA",
                            PasswordHash = "AQAAAAIAAYagAAAAEByflESIU3d7gKkNSTGOWCn9zOocgXSheR49YXMT3NTwukmNxzsRVUOXqtpvbxe5vw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a643a695-9d39-4d61-8186-16670820b822",
                            TwoFactorEnabled = false,
                            UserName = "Ratan Tata"
                        },
                        new
                        {
                            Id = "123456789012345678901260",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9b227fca-e8ee-4dba-a4c0-27966b85e32e",
                            Email = "birla@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BIRLA@EXAMPLE.COM",
                            NormalizedUserName = "KUMARMANGALAM BIRLA",
                            PasswordHash = "AQAAAAIAAYagAAAAELOXj46q70C1nF6xg0jKlCAjysS/GrlaejzWW8Bk1OEfjpqYcVSbzdpt66HDB7Uj1w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "30f81ffc-76ba-44cb-bb5c-c9cdff85fa81",
                            TwoFactorEnabled = false,
                            UserName = "Kumarmangalam Birla"
                        },
                        new
                        {
                            Id = "123456789012345678901261",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4fc5c263-136f-4e44-b217-b989a2210ac2",
                            Email = "azim@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "AZIM@EXAMPLE.COM",
                            NormalizedUserName = "AZIM PREMJI",
                            PasswordHash = "AQAAAAIAAYagAAAAEJQh+UayL2vGHFo1db6iVIbMvkHxN9vSRow0ELzVhWV9zYQKCrPUQO0zbJt1nHBZ8g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7cbf0690-56e8-49ac-9073-56dd33781adf",
                            TwoFactorEnabled = false,
                            UserName = "Azim Premji"
                        },
                        new
                        {
                            Id = "123456789012345678901262",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e015fd66-8ad6-4950-91b1-024c2fcc067c",
                            Email = "adani@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADANI@EXAMPLE.COM",
                            NormalizedUserName = "GAUTAM ADANI",
                            PasswordHash = "AQAAAAIAAYagAAAAEDAJU2Vmy++TT8znaOrq/4Pv/WFY/f3JMRxJBOYV42DEkX6hvj6l6EIFyzmvl+sp0g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "91bd8bb4-0979-4dcf-a060-0ef31e1e4100",
                            TwoFactorEnabled = false,
                            UserName = "Gautam Adani"
                        },
                        new
                        {
                            Id = "123456789012345678901263",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3882b038-6df0-43f0-85ba-a38c970a2ad3",
                            Email = "murthy@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MURTHY@EXAMPLE.COM",
                            NormalizedUserName = "NARAYANA MURTHY",
                            PasswordHash = "AQAAAAIAAYagAAAAEGL3QxjoA36dJcioG/08fI3Gl5lH1jllaP9izrMJtnoW6aDvn0jA5VU09i+w53xp1g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e49972c8-f4c0-4fd5-a9ad-a0950a86cd45",
                            TwoFactorEnabled = false,
                            UserName = "Narayana Murthy"
                        });
                });

            modelBuilder.Entity("MeetingsAPI.Models.Domain.Attendee", b =>
                {
                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("TEXT");

                    b.Property<int>("MeetingId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ApplicationUserId", "MeetingId");

                    b.HasIndex("MeetingId");

                    b.ToTable("Attendee");

                    b.HasData(
                        new
                        {
                            ApplicationUserId = "123456789012345678901249",
                            MeetingId = 11
                        },
                        new
                        {
                            ApplicationUserId = "123456789012345678901250",
                            MeetingId = 11
                        },
                        new
                        {
                            ApplicationUserId = "123456789012345678901251",
                            MeetingId = 11
                        },
                        new
                        {
                            ApplicationUserId = "123456789012345678901252",
                            MeetingId = 11
                        },
                        new
                        {
                            ApplicationUserId = "123456789012345678901253",
                            MeetingId = 11
                        },
                        new
                        {
                            ApplicationUserId = "123456789012345678901254",
                            MeetingId = 11
                        },
                        new
                        {
                            ApplicationUserId = "123456789012345678901255",
                            MeetingId = 11
                        },
                        new
                        {
                            ApplicationUserId = "123456789012345678901256",
                            MeetingId = 11
                        },
                        new
                        {
                            ApplicationUserId = "123456789012345678901257",
                            MeetingId = 11
                        },
                        new
                        {
                            ApplicationUserId = "123456789012345678901251",
                            MeetingId = 12
                        },
                        new
                        {
                            ApplicationUserId = "123456789012345678901252",
                            MeetingId = 12
                        },
                        new
                        {
                            ApplicationUserId = "123456789012345678901253",
                            MeetingId = 12
                        },
                        new
                        {
                            ApplicationUserId = "123456789012345678901255",
                            MeetingId = 12
                        },
                        new
                        {
                            ApplicationUserId = "123456789012345678901256",
                            MeetingId = 12
                        },
                        new
                        {
                            ApplicationUserId = "123456789012345678901249",
                            MeetingId = 13
                        },
                        new
                        {
                            ApplicationUserId = "123456789012345678901250",
                            MeetingId = 13
                        },
                        new
                        {
                            ApplicationUserId = "123456789012345678901254",
                            MeetingId = 13
                        },
                        new
                        {
                            ApplicationUserId = "123456789012345678901257",
                            MeetingId = 13
                        },
                        new
                        {
                            ApplicationUserId = "123456789012345678901236",
                            MeetingId = 14
                        },
                        new
                        {
                            ApplicationUserId = "123456789012345678901239",
                            MeetingId = 14
                        },
                        new
                        {
                            ApplicationUserId = "123456789012345678901240",
                            MeetingId = 14
                        },
                        new
                        {
                            ApplicationUserId = "123456789012345678901249",
                            MeetingId = 14
                        },
                        new
                        {
                            ApplicationUserId = "123456789012345678901250",
                            MeetingId = 14
                        },
                        new
                        {
                            ApplicationUserId = "123456789012345678901255",
                            MeetingId = 14
                        },
                        new
                        {
                            ApplicationUserId = "123456789012345678901256",
                            MeetingId = 14
                        },
                        new
                        {
                            ApplicationUserId = "123456789012345678901241",
                            MeetingId = 15
                        },
                        new
                        {
                            ApplicationUserId = "123456789012345678901243",
                            MeetingId = 15
                        },
                        new
                        {
                            ApplicationUserId = "123456789012345678901244",
                            MeetingId = 15
                        },
                        new
                        {
                            ApplicationUserId = "123456789012345678901251",
                            MeetingId = 15
                        },
                        new
                        {
                            ApplicationUserId = "123456789012345678901252",
                            MeetingId = 15
                        },
                        new
                        {
                            ApplicationUserId = "123456789012345678901253",
                            MeetingId = 15
                        },
                        new
                        {
                            ApplicationUserId = "123456789012345678901254",
                            MeetingId = 15
                        },
                        new
                        {
                            ApplicationUserId = "123456789012345678901257",
                            MeetingId = 15
                        },
                        new
                        {
                            ApplicationUserId = "123456789012345678901251",
                            MeetingId = 16
                        },
                        new
                        {
                            ApplicationUserId = "123456789012345678901252",
                            MeetingId = 16
                        },
                        new
                        {
                            ApplicationUserId = "123456789012345678901253",
                            MeetingId = 16
                        },
                        new
                        {
                            ApplicationUserId = "123456789012345678901255",
                            MeetingId = 16
                        },
                        new
                        {
                            ApplicationUserId = "123456789012345678901256",
                            MeetingId = 16
                        },
                        new
                        {
                            ApplicationUserId = "123456789012345678901249",
                            MeetingId = 17
                        },
                        new
                        {
                            ApplicationUserId = "123456789012345678901250",
                            MeetingId = 17
                        },
                        new
                        {
                            ApplicationUserId = "123456789012345678901254",
                            MeetingId = 17
                        },
                        new
                        {
                            ApplicationUserId = "123456789012345678901257",
                            MeetingId = 17
                        });
                });

            modelBuilder.Entity("MeetingsAPI.Models.Domain.Meetings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<TimeOnly>("endTime")
                        .HasColumnType("TEXT");

                    b.Property<TimeOnly>("startTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Meetings");

                    b.HasData(
                        new
                        {
                            Id = 11,
                            Date = new DateOnly(2020, 11, 5),
                            Description = "Cheers! Online party to celebrate successful completion of training.",
                            Name = "Post-training party",
                            endTime = new TimeOnly(21, 30, 0),
                            startTime = new TimeOnly(20, 0, 0)
                        },
                        new
                        {
                            Id = 12,
                            Date = new DateOnly(2020, 10, 28),
                            Description = "Meeting to discuss S3 profile pic edit and upload requirements, and assign tasks",
                            Name = "User profile pic",
                            endTime = new TimeOnly(10, 0, 0),
                            startTime = new TimeOnly(9, 30, 0)
                        },
                        new
                        {
                            Id = 13,
                            Date = new DateOnly(2020, 10, 28),
                            Description = "Meeting to discuss implementation of Admin features, and assign tasks",
                            Name = "Admin features",
                            endTime = new TimeOnly(10, 0, 0),
                            startTime = new TimeOnly(9, 30, 0)
                        },
                        new
                        {
                            Id = 14,
                            Date = new DateOnly(2020, 10, 27),
                            Description = "Workshop on making short films by various artists at Telstra",
                            Name = "Short-film making workshop",
                            endTime = new TimeOnly(20, 0, 0),
                            startTime = new TimeOnly(18, 0, 0)
                        },
                        new
                        {
                            Id = 15,
                            Date = new DateOnly(2020, 10, 26),
                            Description = "How to tire your opponents into submission yet not break a sweat",
                            Name = "Rock-solid defence",
                            endTime = new TimeOnly(17, 45, 0),
                            startTime = new TimeOnly(16, 0, 0)
                        },
                        new
                        {
                            Id = 16,
                            Date = new DateOnly(2020, 10, 28),
                            Description = "Presentation on implementation of S3 profile pic edit and upload requirements",
                            Name = "User profile pic - Presentation",
                            endTime = new TimeOnly(16, 0, 0),
                            startTime = new TimeOnly(15, 15, 0)
                        },
                        new
                        {
                            Id = 17,
                            Date = new DateOnly(2020, 10, 28),
                            Description = "Presentation on implementation of Admin features",
                            Name = "Admin features - Presentation",
                            endTime = new TimeOnly(15, 15, 0),
                            startTime = new TimeOnly(14, 30, 0)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MeetingsAPI.Models.Domain.Attendee", b =>
                {
                    b.HasOne("MeetingsAPI.Models.Domain.ApplicationUser", "ApplicationUser")
                        .WithMany("Attendees")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeetingsAPI.Models.Domain.Meetings", "Meeting")
                        .WithMany("Attendees")
                        .HasForeignKey("MeetingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Meeting");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MeetingsAPI.Models.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MeetingsAPI.Models.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeetingsAPI.Models.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MeetingsAPI.Models.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MeetingsAPI.Models.Domain.ApplicationUser", b =>
                {
                    b.Navigation("Attendees");
                });

            modelBuilder.Entity("MeetingsAPI.Models.Domain.Meetings", b =>
                {
                    b.Navigation("Attendees");
                });
#pragma warning restore 612, 618
        }
    }
}
